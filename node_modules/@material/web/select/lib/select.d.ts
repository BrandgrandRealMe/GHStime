/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import '../../menu/menu.js';
import { LitElement, nothing, PropertyValues, TemplateResult } from 'lit';
import { ClassInfo } from 'lit/directives/class-map.js';
import { StaticValue } from 'lit/static-html.js';
import { Field } from '../../field/lib/field.js';
import { Menu } from '../../menu/lib/menu.js';
import { DefaultCloseMenuEvent } from '../../menu/lib/shared.js';
import { RequestDeselectionEvent, RequestSelectionEvent, SelectOption, SelectOptionRecord } from './shared.js';
/**
 * @fires input Fired when a selection is made by the user via mouse or keyboard
 * interaction.
 * @fires change Fired when a selection is made by the user via mouse or
 * keyboard interaction.
 */
export declare abstract class Select extends LitElement {
    /**
     * Opens the menu synchronously with no animation.
     */
    quick: boolean;
    /**
     * Whether or not the select is required.
     */
    required: boolean;
    /**
     * Disables the select.
     */
    disabled: boolean;
    /**
     * The error message that replaces supporting text when `error` is true. If
     * `errorText` is an empty string, then the supporting text will continue to
     * show.
     *
     * Calling `reportValidity()` will automatically update `errorText` to the
     * native `validationMessage`.
     */
    errorText: string;
    /**
     * The floating label for the field.
     */
    label: string;
    /**
     * Conveys additional information below the text field, such as how it should
     * be used.
     */
    supportingText: string;
    /**
     * Gets or sets whether or not the text field is in a visually invalid state.
     *
     * Calling `reportValidity()` will automatically update `error`.
     */
    error: boolean;
    /**
     * Whether or not the underlying md-menu should be position: fixed to display
     * in a top-level manner.
     */
    menuFixed: boolean;
    /**
     * The max time between the keystrokes of the typeahead select / menu behavior
     * before it clears the typeahead buffer.
     */
    typeaheadBufferTime: number;
    /**
     * Whether or not the text field has a leading icon. Used for SSR.
     */
    hasLeadingIcon: boolean;
    /**
     * Whether or not the text field has a trailing icon. Used for SSR.
     */
    hasTrailingIcon: boolean;
    /**
     * Text to display in the field. Only set for SSR.
     */
    displayText: string;
    /**
     * When set to true, the error text's `role="alert"` will be removed, then
     * re-added after an animation frame. This will re-announce an error message
     * to screen readers.
     */
    protected refreshErrorAlert: boolean;
    protected focused: boolean;
    protected open: boolean;
    protected field: Field;
    protected menu: Menu;
    protected readonly leadingIcons: Element[];
    protected readonly trailingIcons: Element[];
    /**
     * The value of the currently selected option.
     *
     * Note: For SSR, set `[selected]` on the requested option and `displayText`
     * rather than setting `value` setting `value` will incur a DOM query.
     */
    get value(): string;
    set value(value: string);
    get options(): SelectOption[];
    /**
     * The index of the currently selected option.
     *
     * Note: For SSR, set `[selected]` on the requested option and `displayText`
     * rather than setting `selectedIndex` setting `selectedIndex` will incur a
     * DOM query.
     */
    get selectedIndex(): number;
    set selectedIndex(index: number);
    /**
     * Returns an array of selected options.
     *
     * NOTE: md-select only suppoprts single selection.
     */
    get selectedOptions(): SelectOption[];
    protected abstract readonly fieldTag: StaticValue;
    protected _value: string;
    /**
     * Used for initializing select when the user sets the `value` directly.
     */
    protected lastUserSetValue: string | null;
    /**
     * Used for initializing select when the user sets the `selectedIndex`
     * directly.
     */
    protected lastUserSetSelectedIndex: number | null;
    /**
     * Used for `input` and `change` event change detection.
     */
    protected lastSelectedOption: SelectOption | null;
    protected _lastSelectedOptionRecords: SelectOptionRecord[];
    render(): TemplateResult;
    protected getRenderClasses(): ClassInfo;
    protected renderField(): TemplateResult<2 | 1>;
    protected renderFieldContent(): (symbol | TemplateResult<1>)[];
    protected renderLeadingIcon(): TemplateResult<1>;
    protected renderTrailingIcon(): TemplateResult<1>;
    protected renderLabel(): TemplateResult<1>;
    protected renderSupportingText(): TemplateResult<1> | typeof nothing;
    protected getSupportingText(): string;
    protected shouldErrorAnnounce(): boolean;
    protected renderMenu(): TemplateResult;
    protected renderMenuContent(): TemplateResult;
    /**
     * Handles opening the select on keydown and typahead selection when the menu
     * is closed.
     */
    protected handleKeydown(e: KeyboardEvent): void;
    protected handleClick(): void;
    protected handleFocus(): void;
    protected handleBlur(): void;
    /**
     * Handles closing the menu when the focus leaves the select's subtree.
     */
    protected handleFocusout(e: FocusEvent): void;
    /**
     * Gets a list of all selected select options as a list item record array.
     *
     * @return An array of selected list option records.
     */
    protected getSelectedOptions(): SelectOptionRecord[];
    getUpdateComplete(): Promise<boolean>;
    /**
     * Gets the selected options from the DOM, and updates the value and display
     * text to the first selected option's value and headline respectively.
     *
     * @return Whether or not the selected option has changed since last update.
     */
    protected updateValueAndDisplayText(): boolean;
    update(changed: PropertyValues<this>): void;
    firstUpdated(changed: PropertyValues<this>): Promise<void>;
    protected updated(changedProperties: PropertyValues): void;
    /**
     * Focuses and activates the last selected item upon opening, and resets other
     * active items.
     */
    protected handleOpening(): Promise<void>;
    protected handleClosing(): void;
    /**
     * Determines the reason for closing, and updates the UI accordingly.
     */
    protected handleCloseMenu(e: InstanceType<typeof DefaultCloseMenuEvent>): void;
    /**
     * Selects a given option, deselects other options, and updates the UI.
     *
     * @return Whether the last selected option has changed.
     */
    protected selectItem(item: SelectOption): boolean;
    /**
     * Handles updating selection when an option element requests selection via
     * property / attribute change.
     */
    protected handleRequestSelection(e: RequestSelectionEvent): void;
    /**
     * Handles updating selection when an option element requests deselection via
     * property / attribute change.
     */
    protected handleRequestDeselection(e: RequestDeselectionEvent): void;
    /**
     * Selects an option given the value of the option, and updates MdSelect's
     * value.
     */
    select(value: string): void;
    /**
     * Selects an option given the index of the option, and updates MdSelect's
     * value.
     */
    selectIndex(index: number): void;
    /**
     * Attempts to initialize the selected option from user-settable values like
     * SSR, setting `value`, or `selectedIndex` at startup.
     */
    protected initUserSelection(): void;
    protected handleIconChange(): void;
    /**
     * Dispatches the `input` and `change` events.
     */
    protected dispatchInteractionEvents(): void;
}
