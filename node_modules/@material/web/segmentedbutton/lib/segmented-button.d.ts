/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import '../../focus/focus-ring.js';
import '../../ripple/ripple.js';
import { LitElement, PropertyValues } from 'lit';
import { MdRipple } from '../../ripple/ripple.js';
/**
 * SegmentedButton is a web component implementation of the Material Design
 * segmented button component. It is intended **only** for use as a child of a
 * `SementedButtonSet` component. It is **not** intended for use in any other
 * context.
 */
export declare class SegmentedButton extends LitElement {
    disabled: boolean;
    selected: boolean;
    label: string;
    noCheckmark: boolean;
    hasIcon: boolean;
    protected animState: string;
    protected showFocusRing: boolean;
    protected showRipple: boolean;
    protected iconElement: HTMLElement[];
    protected ripple: Promise<MdRipple | null>;
    protected update(props: PropertyValues<SegmentedButton>): void;
    private nextAnimationState;
    handleClick(e: MouseEvent): void;
    handlePointerDown(e: PointerEvent): void;
    protected handleFocus(): void;
    protected handleBlur(): void;
    render(): import("lit-html").TemplateResult<1>;
    protected getRenderClasses(): {
        'md3-segmented-button--selected': boolean;
        'md3-segmented-button--unselected': boolean;
        'md3-segmented-button--with-label': boolean;
        'md3-segmented-button--without-label': boolean;
        'md3-segmented-button--with-icon': boolean;
        'md3-segmented-button--with-checkmark': boolean;
        'md3-segmented-button--without-checkmark': boolean;
        'md3-segmented-button--selecting': boolean;
        'md3-segmented-button--deselecting': boolean;
    };
    protected renderFocusRing(): import("lit-html").TemplateResult<1>;
    protected readonly getRipple: () => Promise<MdRipple>;
    protected renderRipple: () => import("lit-html").TemplateResult<1>;
    protected renderOutline(): import("lit-html").TemplateResult<1>;
    protected renderLeading(): import("lit-html").TemplateResult<1>;
    protected renderLeadingWithoutLabel(): import("lit-html").TemplateResult<1>;
    protected renderLeadingWithLabel(): import("lit-html").TemplateResult<1>;
    protected renderLabel(): import("lit-html").TemplateResult<1>;
    protected renderTouchTarget(): import("lit-html").TemplateResult<1>;
}
